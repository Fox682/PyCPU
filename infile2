ld ax,0
ld bx,5
inc ax
cmp ax,bx
je 1
jmp -4
ld bx,0
dec ax
cmp ax,bx
je -9
jmp -4
0


########### Test Programs ########
- Count to 5 and back to 0
- Repeat

ld ax,0
ld bx,5
inc ax
cmp ax,bx
je 1
jmp -4
ld bx,0
dec ax
cmp ax,bx
je -9
jmp -4
0

######
Notes: - put notes after '0'

- CPU and Compiler will stop at '0'
---- INCLUDE THE 0!

---> DO NOT PUT SPACES TO BREAK UP THE CODE <---
.
.
inc ax

inc bx
.
.
- This will cause the Compiler to duplicate the instruction before the space (Bug - Medium Priority, I want spaces too!)

- NOP WILL work however you need a 0 next to it

nop 0  <-- include the Zero

#Bug in how the Instruction Splitting is handled (Low Priority)


----- IMPORTANT: How JMP instruction is calculated -----

#For NEGATIVE Jumping

inc ax,0   	- 1st <- jmps here->3
inc bx,0   	- 2nd <-------------2
jmp -3  	- 3rd <- counts as  1
0				- Halts CPU & Compiler!

#For POSITIVE Jumping

jmp 1     	- Skip
inc ax		- 0 -> == jmp 0
inc ax		- 1 <-- JMPs Here and Execute (== skip next instruction)
inc ax		- == jmp 2
inc ax		
0

ax = 3

#Not a bug, Expected Behavior (for now)

####################
Code Notes:

Adjust the Speed of the CPU using the SLEEP instruction in the Python Code
- Not reccomended to use sleep for anything more than 10 khz as it WILL BOG DOWN YOUR CPU
---->>>> This is because it is outputting to the Console

If you want to really set the sleep to a very low value OR let the CPU "freewheel" (aka, heat up your CPU):
- Comment out Status Print Instructions and the END of the cpu.py code




