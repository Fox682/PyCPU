ldi ax,0
ldi bx,10
str ax,bx
inc ax
push bx
ldi bx,24
cmp ax,bx
pop bx
je 1
jmp -8
ldi bx,0
str ax,bx
dec ax
push bx
ldi bx,0
cmp ax,bx
pop bx
je 1
jmp -8
jmp -20
0

######### Stack Testing

ldi ax,1
ldi bx,10
push ax
inc ax
cmp ax,bx
je 1
jmp -5
0



########### Test Programs ########
- Count to 5 and back to 0
- Repeat

ldi ax,0
ldi bx,5
inc ax
cmp ax,bx
je 1
jmp -4
ldi bx,0
dec ax
cmp ax,bx
je -9
jmp -4
0

######
- Fill Memory up
# Will Crash the CPU!
# WARNING: No bounds checking for memory
# Will throw an error in python, the CPU is functioning as expected

ldi ax,0
ldi bx,99
str ax,bx
inc ax
jmp -3
0

# This version won't crash the CPU
# Uses the Stack

ldi ax,0
ldi bx,99
str ax,bx
inc ax
push bx
ldi bx,4
cmp ax,bx
je 2
pop bx
jmp -8
0

#Fill Memory with Stack

ldi ax,1
ldi bx,5
push ax
inc ax
cmp ax,bx
je 1
jmp -5
0

#####
- Fill with 1's and then empty the memory, loop
- Fixed, pops and pushes didn't line up ;-)
- Run with sleep(0.01), oooh aaaah

ldi ax,0
ldi bx,10
str ax,bx
inc ax
push bx
ldi bx,24
cmp ax,bx
pop bx
je 1
jmp -8
ldi bx,0
str ax,bx
dec ax
push bx
ldi bx,0
cmp ax,bx
pop bx
je 1
jmp -8
jmp -20
0

######


Notation Rules:

1. Do the Notes
2. Compiler will tolerate spaces in the Code
-- If you want in-line notes use a space after the instructions and with #

eg. add ax,bx #Notes like This

- In-line is OK!

add ax,bx
#Note here, include the "#" mark before the notes
cmp ax,bx

jmp -3 #Spaces are OK!
0

You can put notes after '0' in ANY way you like
- Compiler and CPU will NOT process any instructions after "0"

- NOP WILL work however you need a 0 next to it
nop 0  <-- include the Zero

#Bug in how the Instruction Splitting is handled (Low Priority)

----- IMPORTANT: How JMP instruction is calculated -----

Jumping is Relative to the point from which you jmp
- For NEGATIVE Jumping (Back/Up)

inc ax,0   	<-- jumps here  jmp -3
inc bx,0   	<-------------- jmp -2
jmp -3  	  <-------------- jmp -1
0				    - Halts CPU & Compiler!

- For POSITIVE Jumping (Forward/Down)

jmp 1     	- Skips
inc ax	 <----- jmp 0
inc ax	 <----- jmp 1
inc ax	 <----- jmp 2
inc ax   <----- jmp 3
0

#Not a bug, Expected Behavior

####################
Code Notes:

Adjust the Speed of the CPU using the SLEEP instruction in the Python Code
- Not recommended to use sleep for anything more than 10 khz (0.0001) as it WILL BOG DOWN YOUR CPU
---->>>> This is because it is outputting to the Console
---->>>> Comment out the bottom print lines at the end of cpu.py for more performance
---->>>> You can remove the sleep() line and it will Freewheel the CPU
